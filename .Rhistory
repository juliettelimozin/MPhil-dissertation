theme(legend.text = element_text(size=14))
}
)
for(i in 1:18){
if(i %in% 1:9){
if(i %in% c(2, 5, 8)){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
labs(title = bquote(atop(alpha[c] == .(scenarios[i,2]), alpha[a] == .(scenarios[i,3]))))} else{
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
labs(title = bquote(atop(phantom(3),alpha[a] == .(scenarios[i,3]))))
}
}
if(i %in% c(1,10)){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
ylab(bquote(atop(n == .(scenarios[i,1]), 'Ratio of SEs')))
} else{mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
}
if(i %in% 10:18){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
xlab('Visit')
} else {mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank())
}
}
annotate_figure(ggarrange(plotlist = mrd_se_quantiles_med, nrow = 2, ncol = 9, common.legend = T,
legend = 'bottom',
widths = c(1.4,1,1,1,1,1,1,1,1),
heights = c(1.1, 1)))
pivot_success[1,,,1]
mrd_se_quantiles_med <-  lapply(10:27, function(i){
ggplot(se_ratio[se_ratio$i == i & se_ratio$j == 1 & se_ratio$CI_type != 'Jackknife MVN' & se_ratio$CI_type != 'Jackknife Wald',]) +
stat_summary(
mapping = aes(x = Visit, y = SE_ratio, colour = CI_type),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = mean,
size=0.3,
position = position_dodge(width = 0.5))+
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple",
"Jackknife MVN" = 'orange',"Jackknife Wald" = 'deepskyblue' )) +
#ylim(0,2.25) +
geom_hline(yintercept = 1, linetype = "dashed")+
theme(legend.text = element_text(size=14))
}
)
for(i in 1:18){
if(i %in% 1:9){
if(i %in% c(2, 5, 8)){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
labs(title = bquote(atop(alpha[c] == .(scenarios[i,2]), alpha[a] == .(scenarios[i,3]))))} else{
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
labs(title = bquote(atop(phantom(3),alpha[a] == .(scenarios[i,3]))))
}
}
if(i %in% c(1,10)){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
ylab(bquote(atop(n == .(scenarios[i,1]), 'Ratio of SEs')))
} else{mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
}
if(i %in% 10:18){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
xlab('Visit')
} else {mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank())
}
}
annotate_figure(ggarrange(plotlist = mrd_se_quantiles_med, nrow = 2, ncol = 9, common.legend = T,
legend = 'bottom',
widths = c(1.4,1,1,1,1,1,1,1,1),
heights = c(1.1, 1)))
mrd_se_quantiles_med <-  lapply(10:27, function(i){
ggplot(se_ratio[se_ratio$i == i & se_ratio$j == 1 & se_ratio$CI_type != 'Jackknife MVN' & se_ratio$CI_type != 'Jackknife Wald',]) +
stat_summary(
mapping = aes(x = Visit, y = SE_ratio, colour = CI_type),
fun.min = function(z) { quantile(z,0.25) },
fun.max = function(z) { quantile(z,0.75) },
fun = mean,
size=0.3,
position = position_dodge(width = 0.5))+
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple",
"Jackknife MVN" = 'orange',"Jackknife Wald" = 'deepskyblue' )) +
#ylim(0,2.25) +
geom_hline(yintercept = 1, linetype = "dashed")+
theme(legend.text = element_text(size=14))
}
)
for(i in 1:18){
if(i %in% 1:9){
if(i %in% c(2, 5, 8)){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
labs(title = bquote(atop(alpha[c] == .(scenarios[i,2]), alpha[a] == .(scenarios[i,3]))))} else{
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
labs(title = bquote(atop(phantom(3),alpha[a] == .(scenarios[i,3]))))
}
}
if(i %in% c(1,10)){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
ylab(bquote(atop(n == .(scenarios[i+9,1]), 'Ratio of SEs')))
} else{mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
}
if(i %in% 10:18){
mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
xlab('Visit')
} else {mrd_se_quantiles_med[[i]] <- mrd_se_quantiles_med[[i]] +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank())
}
}
annotate_figure(ggarrange(plotlist = mrd_se_quantiles_med, nrow = 2, ncol = 9, common.legend = T,
legend = 'bottom',
widths = c(1.4,1,1,1,1,1,1,1,1),
heights = c(1.1, 1)))
setwd("~/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
load('hers.Rdata')
library(modelr)
library(reshape2)
library(tidyverse)
library(tidyr)
source("simulate_MSM_simplified.R")
source("weight_func.R")
data_direction <- getwd()
library(TrialEmulation)
library(MASS)
library(sandwich)
library(doParallel)
library(doRNG)
library(pammtools)
library(lmtest)
library(xtable)
library(data.table)
library(reshape2)
set.seed(3012)
############# DATA PREPARATION ##################
HERS$Y <- as.factor(HERS$Y)
HERS$t <- HERS$visit - 8
HERS$SITE1 <- as.factor(HERS$SITE1)
HERS$SITE2 <- as.factor(HERS$SITE2)
HERS$SITE3 <- as.factor(HERS$SITE3)
HERS$WHITE <- as.factor(HERS$WHITE)
HERS$OTHER <- as.factor(HERS$OTHER)
HERS$CD4 <- (sqrt(as.numeric(HERS$CD4)) - mean(sqrt(HERS$CD4)))/sd(sqrt(HERS$CD4))
HERS$CD4_1 <- (sqrt(as.numeric(HERS$CD4_1)) - mean(sqrt(HERS$CD4_1)))/sd(sqrt(HERS$CD4_1))
HERS$CD4_2 <- (sqrt(as.numeric(HERS$CD4_2)) - mean(sqrt(HERS$CD4_2)))/sd(sqrt(HERS$CD4_2))
HERS$HIVsym <- as.factor(HERS$HIVsym)
HERS$HIVsym_1 <- as.factor(HERS$HIVsym_1)
HERS$HIVsym_2 <- as.factor(HERS$HIVsym_2)
HERS$viral <- (log10(HERS$viral) - mean(log10(HERS$viral)))/sd(log10(HERS$viral))
HERS$viral_1 <- (log10(HERS$viral_1) - mean(log10(HERS$viral_1)))/sd(log10(HERS$viral_1))
HERS$viral_2 <- (log10(HERS$viral_2) - mean(log10(HERS$viral_2)))/sd(log10(HERS$viral_2))
HERS <- HERS %>%
dplyr::arrange(id,t) %>%
dplyr::group_by(id) %>%
dplyr::mutate(CAp = cumsum(as.numeric(haart_1 == 1 | haart_2 == 1))) %>%
dplyr::ungroup()
HERS$A <- HERS$haart
HERS$Ap <- HERS$haart_1
HERS$App <- HERS$haart_2
HERS[,'ID'] <- HERS$id
HERS <- HERS %>%
dplyr::mutate(SITE = as.factor(ifelse(SITE1 == 1, 1, ifelse(SITE2 == 1,2,3))),
ETHNICITY = as.factor(ifelse(WHITE == 0 & OTHER == 0, 0, ifelse(WHITE == 1, 1, 2)))) %>%
dplyr::select(ID, t, A, Ap, App,CAp, CD4, CD4_1,CD4_2,
viral,viral_1,viral_2,HIVsym,HIVsym_1,HIVsym_2,
SITE, WHITE, OTHER,ETHNICITY, Y, C)
HERS$eligible <- as.numeric(HERS$CAp == 0)
summary_HERS <- HERS %>%
summarize(total_cense = sum(as.numeric(Y)-1))
#################SEQUENTIAL TRIALS IPW AND MSM #########################
PP_prep <- TrialEmulation::data_preparation(data = HERS, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible', cense = 'C', use_censor_weights = T,
switch_d_cov = ~ CD4_1 + CD4_2 +  viral_1 + viral_2 + HIVsym_1+ SITE + ETHNICITY,
cense_d_cov = ~ CD4_1 + CD4  + viral + viral_1  + HIVsym + HIVsym_1+ SITE + ETHNICITY,
outcome_cov = ~ CD4 + CD4_1 + CD4_2 + viral+ viral_1 + viral_2 + HIVsym + HIVsym_1 + HIVsym_2+ SITE + ETHNICITY + C,
model_var = c('assigned_treatment'),
estimand_type = 'PP', quiet = F,
pool_cense = 'none',
save_weight_models = T,
data_dir = data_direction)
data_tabulation <- PP_prep$data %>%
dplyr::select(id,trial_period, assigned_treatment, outcome, C) %>%
dplyr::group_by(id, trial_period) %>%
dplyr::mutate(outcome = sum(outcome), C = sum(C)) %>%
dplyr::ungroup() %>%
dplyr::distinct() %>%
dplyr::group_by(assigned_treatment, outcome, C, trial_period)%>%
dplyr::summarise(count = n())
con4<-xtabs(~assigned_treatment + outcome + C + trial_period, data=data_tabulation)
ftable(con4)
xftbl <- xtableFtable(ftable(con4), method = "compact")
print.xtableFtable(xftbl, booktabs = T)
switch_data <- PP_prep$data %>%
dplyr::mutate(haartCD4_1 = assigned_treatment*CD4_1)
summary_trial0 <- switch_data %>%
dplyr::filter(followup_time == 0) %>%
dplyr::group_by(trial_period) %>%
dplyr::count()
summary_trial0 <- HERS %>%
dplyr::group_by(t) %>%
dplyr::count(A)
PP <- TrialEmulation::trial_msm(data = switch_data,
outcome_cov = ~ CD4_1 + CD4_2 + viral_1 + viral_2 + SITE + ETHNICITY + assigned_treatment+
haartCD4_1,
model_var = c('assigned_treatment'),
analysis_weights = 'asis',
glm_function = 'parglm',
include_trial_period = ~1, include_followup_time = ~1,
estimand_type = 'PP', quiet = F, use_sample_weights =  F)
print(xtable(as.data.frame(PP$robust$summary), type = "latex", digits = 4))
switch_d0 <- readRDS(paste(data_direction,'/weight_model_switch_d0.rds', sep = ""))
switch_n0 <- readRDS(paste(data_direction,'/weight_model_switch_n0.rds', sep = ""))
switch_d1 <- readRDS(paste(data_direction,'/weight_model_switch_d1.rds', sep = ""))
switch_n1 <- readRDS(paste(data_direction,'/weight_model_switch_n1.rds', sep = ""))
cense_d0 <- readRDS(paste(data_direction,'/cense_model_d0.rds', sep = ""))
cense_d1 <- readRDS(paste(data_direction,'/cense_model_d1.rds', sep = ""))
cense_n0 <- readRDS(paste(data_direction,'/cense_model_n0.rds', sep = ""))
cense_n1 <- readRDS(paste(data_direction,'/cense_model_n1.rds', sep = ""))
#################### TRADITIONAL IPW-MSM ('SINGLE TRIAL') ####################################
# weight_model_switch_d1 <- glm(A ~ CD4_1 + CD4_2 +  viral_1 + viral_2 + HIVsym_1+ SITE + ETHNICITY,
#                               family = binomial(link = "logit"), data = HERS[HERS$Ap == 1])
# weight_model_switch_d0 <- glm(A ~ CD4_1 + CD4_2 +  viral_1 + viral_2 + HIVsym_1+ SITE + ETHNICITY,
#                               family = binomial(link = "logit"), data = HERS[HERS$Ap == 0])
# weight_model_switch_n1 <- glm(A ~ 1,
#                               family = binomial(link = "logit"), data = HERS[HERS$Ap == 1])
# weight_model_switch_n0 <- glm(A ~ 1,
#                               family = binomial(link = "logit"), data = HERS[HERS$Ap == 0])
# weight_model_censor_d1 <- glm(C ~ CD4_1 + CD4 + viral + viral_1 + HIVsym + HIVsym_1+ SITE + ETHNICITY,
#                                family = binomial(link = "logit"), data = HERS[HERS$Ap == 1])
# weight_model_censor_d0 <- glm(C ~ CD4_1 + CD4 + viral + viral_1 + HIVsym + HIVsym_1+ SITE + ETHNICITY,
#                               family = binomial(link = "logit"), data = HERS[HERS$Ap == 0])
# weight_model_censor_n1 <- glm(C ~ 1,
#                              family = binomial(link = "logit"), data = HERS[HERS$Ap == 1])
# weight_model_censor_n0 <- glm(C ~ 1,
#                               family = binomial(link = "logit"), data = HERS[HERS$Ap == 0])
#
#
# hers_data_tradi <- HERS %>%
#   dplyr::arrange(ID, t) %>%
#   dplyr::mutate(weight_A = ifelse(Ap == 1 & A == 1,
#                                   predict.glm(weight_model_switch_n1,HERS[HERS$Ap == 1],
#                                               type = 'response'),
#                                   ifelse(Ap == 1 & A == 0,
#                                          1-predict.glm(weight_model_switch_n1,HERS[HERS$Ap == 1], type = 'response'),
#                                          ifelse(Ap ==0 & A == 1,
#                                                 predict.glm(weight_model_switch_n0,HERS[HERS$Ap == 0],
#                                                             type = 'response'),
#                                                 1-predict.glm(weight_model_switch_n0,HERS[HERS$Ap == 0],
#                                                               type = 'response'))))/ifelse(Ap == 1 & A == 1,
#                                     predict.glm(weight_model_switch_d1,HERS[HERS$Ap == 1],
#                                                 type = 'response'),
#                                     ifelse(Ap == 1 & A == 0,
#                                            1-predict.glm(weight_model_switch_d1,HERS[HERS$Ap == 1], type = 'response'),
#                                            ifelse(Ap ==0 & A == 1,
#                                                   predict.glm(weight_model_switch_d0,HERS[HERS$Ap == 0],
#                                                                               type = 'response'),
#                                                   1-predict.glm(weight_model_switch_d0,HERS[HERS$Ap == 0],
#                                                               type = 'response')))),
#                 weight_C = ifelse(Ap == 1 & C == 1,
#                                   predict.glm(weight_model_censor_n1,HERS[HERS$Ap == 1],
#                                               type = 'response'),
#                                   ifelse(Ap == 1 & C == 0,1-predict.glm(weight_model_censor_n1,HERS[HERS$Ap == 1], type = 'response'),
#                                          ifelse(Ap ==0 & C == 1,predict.glm(weight_model_switch_n0,HERS[HERS$Ap == 0],
#                                                                             type = 'response'),
#                                                 1-predict.glm(weight_model_censor_n0,HERS[HERS$Ap == 0],
#                                                               type = 'response'))))/ifelse(Ap == 1 & C == 1,
#                                   predict.glm(weight_model_censor_d1,HERS[HERS$Ap == 1],
#                                               type = 'response'),
#                                   ifelse(Ap == 1 & C == 0,1-predict.glm(weight_model_censor_d1,HERS[HERS$Ap == 1], type = 'response'),
#                                          ifelse(Ap ==0 & C == 1,predict.glm(weight_model_switch_d0,HERS[HERS$Ap == 0],
#                                                                             type = 'response'),
#                                                 1-predict.glm(weight_model_censor_d0,HERS[HERS$Ap == 0],
#                                                               type = 'response')))),
#                 weight = weight_A * weight_C) %>%
#   dplyr::group_by(ID) %>%
#   dplyr::mutate(weight = replace(weight, 1,1)) %>%
#   dplyr::mutate(weight = cumprod(weight),CA = cumsum(A),
#                 CD4_1 = first(CD4_1),
#                 CD4_2 = first(CD4_2),
#                 viral_1 = first(viral_1),
#                 viral_2 = first(viral_2),
#                 SITE = first(SITE),
#                 WHITE = first(WHITE),
#                 OTHER = first(OTHER),
#                 haartCD4_1 = A*CD4_1) %>%
#   dplyr::ungroup() %>%
#   dplyr::mutate(tA = as.factor(t * A),
#                 t = as.factor(t),
#                 followup_time = t,
#                 assigned_treatment = A,
#                 outcome = Y,
#                 CA = cumsum(assigned_treatment)) %>%
#   dplyr::group_by(ID) %>%
#   dplyr::filter(
#                 first(CAp) == 0)
#
# summary(hers_data_tradi$weight)
# sd(hers_data_tradi$weight)
# quantile(hers_data_tradi$weight, c(0.01,0.99))
# fit_tradi <- glm(formula = outcome ~  CA +CD4_1 + CD4_2 +
#                        viral_1 + viral_2 + SITE + ETHNICITY +
#                        CA*CD4_1 , family = binomial(link = "logit"), data = hers_data_tradi,
#                      weights = hers_data_tradi[["weight"]])
#
# print(xtable(as.data.frame(summary(fit_tradi)$coefficients), type = "latex", digits = 3))
##############
IPW_summary <- rbind(cbind(1,min(switch_data[switch_data$assigned_treatment == 1,]$weight),
quantile(switch_data[switch_data$assigned_treatment == 1,]$weight, probs = 0.25),
mean(switch_data[switch_data$assigned_treatment == 1,]$weight),
median(switch_data[switch_data$assigned_treatment == 1,]$weight),
quantile(switch_data[switch_data$assigned_treatment == 1,]$weight, probs = 0.75),
max(switch_data[switch_data$assigned_treatment == 1,]$weight)),
cbind(0,min(switch_data[switch_data$assigned_treatment == 0,]$weight),
quantile(switch_data[switch_data$assigned_treatment ==0,]$weight, probs = 0.25),
mean(switch_data[switch_data$assigned_treatment == 0,]$weight),
median(switch_data[switch_data$assigned_treatment == 0,]$weight),
quantile(switch_data[switch_data$assigned_treatment == 0,]$weight, probs = 0.75),
max(switch_data[switch_data$assigned_treatment == 0,]$weight)))
colnames(IPW_summary)<- c('Assigned treatment', 'Minimum', '1st quantile', 'Mean', 'Median', '3rd quantile', 'Maximum')
print(xtable(IPW_summary, type = 'latex'), digits = c(0,0,2,2,2,2,2,2), include.rownames = F)
design_mat <- expand.grid(id = 1:609,
trial_period = 0:4,
followup_time = 0:4)
design_mat <- design_mat[which(5 -design_mat$trial_period > design_mat$followup_time),]
fitting_data_treatment <-  switch_data %>%
dplyr::mutate(assigned_treatment = followup_time*0 + 1) %>%
dplyr::select(id,trial_period, followup_time,CD4_1 , CD4_2 , viral_1 ,
viral_2 , SITE , ETHNICITY, assigned_treatment,
haartCD4_1) %>%
merge(design_mat, by = c("id", "trial_period", "followup_time"), all.y = TRUE) %>%
dplyr::group_by(id) %>%
tidyr::fill(CD4_1 , CD4_2 , viral_1 , viral_2 , SITE , ETHNICITY, assigned_treatment,
haartCD4_1,.direction = "down") %>%
dplyr::ungroup() %>%
dplyr::select(id, trial_period, followup_time,CD4_1 , CD4_2 , viral_1 ,
viral_2 , SITE , ETHNICITY, assigned_treatment,
haartCD4_1) %>%
merge(data.frame(id = switch_data$id, trial_period = switch_data$trial_period),
by = c("id", "trial_period"), all.y = TRUE) %>%
dplyr::arrange(id, trial_period, followup_time) %>%
dplyr::mutate(haartCD4_1 = assigned_treatment*CD4_1) %>%
distinct() %>%
dplyr::filter(trial_period == 0)
fitting_data_treatment <- fitting_data_treatment[!duplicated(fitting_data_treatment),]
fitting_data_control <- fitting_data_treatment %>%
dplyr::mutate(assigned_treatment = assigned_treatment*0,
haartCD4_1 = haartCD4_1*0)%>%
dplyr::distinct()
####################### ESTIMATES ####################
Y_pred_PP_treatment <- predict.glm(PP$model,
fitting_data_treatment,
type = "response")
Y_pred_PP_control <- predict.glm(PP$model,
fitting_data_control,
type = "response")
predicted_probas_PP <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_PP_treatment,
predicted_proba_control = Y_pred_PP_control) %>%
dplyr::group_by(id, trial_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::ungroup() %>%
dplyr::group_by(followup_time) %>%
dplyr::summarise(survival_treatment = mean(cum_hazard_treatment),
survival_control = mean(cum_hazard_control),
risk_difference = survival_control - survival_treatment)
# ###############
# Y_pred_PP_treatment_tradi <- predict.glm(fit_tradi,
#                                    fitting_data_treatment,
#                                    type = "response")
# Y_pred_PP_control_tradi <- predict.glm(fit_tradi,
#                                  fitting_data_control,
#                                  type = "response")
# predicted_probas_PP_tradi <- fitting_data_treatment %>%
#   dplyr::mutate(predicted_proba_treatment = Y_pred_PP_treatment_tradi,
#                 predicted_proba_control = Y_pred_PP_control_tradi) %>%
#   dplyr::group_by(id, trial_period) %>%
#   dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
#                 cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
#   dplyr::ungroup() %>%
#   dplyr::group_by(followup_time) %>%
#   dplyr::summarise(survival_treatment = mean(cum_hazard_treatment),
#                    survival_control = mean(cum_hazard_control),
#                    risk_difference = survival_control - survival_treatment)
#
# ggplot() +geom_line(aes(x = 0:4,y = pull(predicted_probas_PP_tradi,risk_difference),
#                         color = 'Traditional IPW-MSM analysis'))+
#   geom_point(aes(x = 0:4,y = pull(predicted_probas_PP_tradi,risk_difference)))+
#   geom_line(aes(x = 0:4,y = pull(predicted_probas_PP,risk_difference),
#                 color = 'Sequential trial emulation analysis'))+
#   geom_point(aes(x = 0:4,y = pull(predicted_probas_PP,risk_difference))) +
#   scale_color_manual(name = "Per-protocol analysis method",
#                      values = c("Traditional IPW-MSM analysis"= "red",
#                                 "Sequential trial emulation analysis" = "blue")) +
#   labs(x = 'Follow-up time',
#        y = "Marginal risk difference", title = "HERS data analysis: comparison of\nsequential trial emulation and IPW-MSM")
#
###############
boot_data_conf <- list()
for (k in 1:500) {
boot_data_conf[[k]] <- sort(sample(unique(switch_data$id), length(unique(switch_data$id)), replace = TRUE))
}
registerDoParallel(cores = 4)
k = 1
weights_table_boot <- data.frame(id = 1:609) %>%
rowwise() %>%
dplyr::mutate(weight_boot = length(boot_data_conf[[k]][boot_data_conf[[k]] == id])) #bootstrap weight is number of times they were sampled
IP_model <- weight_func_bootstrap(data = HERS,expanded_data = switch_data, cense = 'C',
switch_d_cov = ~CD4_1 + CD4_2 +  viral_1 + viral_2 + HIVsym_1+ SITE + ETHNICITY,
cense_d_cov = ~CD4_1 + CD4 + viral + viral_1 + HIVsym + HIVsym_1+ SITE + ETHNICITY,
weight_model_d0 = switch_d0,
weight_model_n0 = switch_n0,
weight_model_d1 = switch_d1,
weight_model_n1 = switch_n1,
cense_model_d0 = cense_d0,
cense_model_n0 = cense_n0,
cense_model_d1 = cense_d1,
cense_model_n1 = cense_n1,
boot_idx = boot_data_conf[[k]], remodel = TRUE, quiet = F)
#calculate IP weights from bootstrap sample
boot_design_data <- IP_model$data %>%
merge(weights_table_boot, by = 'id', all.y = TRUE) %>%
dplyr::mutate(weight = ifelse(weight_boot !=0,weight*weight_boot,0))
#     first(CAp) == 0) %>%
#   dplyr::mutate(id = ID) %>%
#   merge(weights_table_boot, by = 'id', all.y = TRUE) %>%
#   dplyr::mutate(weight = ifelse(weight_boot !=0,weight*weight_boot,0))
#
# fit_tradi_boot <- glm(formula = outcome ~ assigned_treatment + CD4_1 + CD4_2 +
#                        viral_1 + viral_2 + SITE + ETHNICITY +
#                        haartCD4_1 + CA , family = binomial(link = "logit"), data = boot_design_data_tradi,
#                      weights = boot_design_data_tradi[["weight"]])
###########
PP_boot <- TrialEmulation::trial_msm(data = boot_design_data,
outcome_cov = ~ CD4_1 + CD4_2 + viral_1 + viral_2 + SITE + ETHNICITY + assigned_treatment+
haartCD4_1,
model_var = c('assigned_treatment'),
analysis_weights = 'asis',
glm_function = 'parglm',
include_trial_period = ~1, include_followup_time = ~1,
estimand_type = 'PP', quiet = F, use_sample_weights =  F)
Y_pred_PP_treatment_boot <- predict.glm(PP_boot$model,
fitting_data_treatment,
type = "response")
Y_pred_PP_control_boot <- predict.glm(PP_boot$model,
fitting_data_control,
type = "response")
Y_pred_PP_treatment_boot <- predict.glm(PP_boot$model,
fitting_data_treatment,
type = "response")
Y_pred_PP_control_boot <- predict.glm(PP_boot$model,
fitting_data_control,
type = "response")
predicted_probas_PP_boot <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_PP_treatment_boot,
predicted_proba_control = Y_pred_PP_control_boot) %>%
dplyr::group_by(id, trial_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::ungroup() %>%
dplyr::mutate(weight_boot = length(boot_data_conf[[k]][boot_data_conf[[k]] == id]))
View(predicted_probas_PP_boot)
predicted_probas_PP_boot <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_PP_treatment_boot,
predicted_proba_control = Y_pred_PP_control_boot) %>%
dplyr::group_by(id, trial_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::ungroup() %>%
rowwise() %>%
dplyr::mutate(weight_boot = length(boot_data_conf[[k]][boot_data_conf[[k]] == id]))
View(predicted_probas_PP_boot)
predicted_probas_PP_boot <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_PP_treatment_boot,
predicted_proba_control = Y_pred_PP_control_boot) %>%
dplyr::group_by(id, trial_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::mutate(weight_boot = length(boot_data_conf[[k]][boot_data_conf[[k]] == id]))
predicted_probas_PP_boot <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_PP_treatment_boot,
predicted_proba_control = Y_pred_PP_control_boot) %>%
dplyr::group_by(id, trial_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::mutate(weight_boot = length(boot_data_conf[[k]][boot_data_conf[[k]] == id]))
View(predicted_probas_PP_boot)
predicted_probas_PP_boot <- fitting_data_treatment %>%
dplyr::mutate(predicted_proba_treatment = Y_pred_PP_treatment_boot,
predicted_proba_control = Y_pred_PP_control_boot) %>%
dplyr::group_by(id, trial_period) %>%
dplyr::mutate(cum_hazard_treatment = cumprod(1-predicted_proba_treatment),
cum_hazard_control = cumprod(1-predicted_proba_control)) %>%
dplyr::rowwise() %>%
dplyr::mutate(weight_boot = length(boot_data_conf[[k]][boot_data_conf[[k]] == id]))
View(predicted_probas_PP_boot)
View(weights_table_boot)
source("~/Multiple-trial-emulation-IPTW-MSM-CIs/Code/HERS_modelling_fixed_boot.R", echo=TRUE)
