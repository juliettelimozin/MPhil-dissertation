geom_line(aes(x = 0:4, y = MC_SE_pivot[1,,i,2], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[1,,i,2], colour = "Bootstrap")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[2,,i,2], colour = "LEF outcome")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[2,,i,2], colour = "LEF outcome")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[3,,i,2], colour = "LEF both")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[3,,i,2], colour = "LEF both")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[4,,i,2], colour = "Sandwich")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[4,,i,2], colour = "Sandwich")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[5,,i,2], colour = "Jackknife MVN")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[5,,i,2], colour = "Jackknife MVN")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[6,,i,2], colour = "Jackknife Wald")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[6,,i,2], colour = "Jackknife Wald")) +
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple",
"Jackknife MVN" = 'orange',"Jackknife Wald" = 'deepskyblue' )) +
ylim(0,0.02) +
theme(legend.text = element_text(size=14))
}
)
for(i in 1:27){
if(i %in% 1:9){
if(i %in% c(2, 5, 8)){
MCSE_med[[i]] <- MCSE_med[[i]] +
labs(title = bquote(atop(alpha[c] == .(scenarios[i,2]), alpha[a] == .(scenarios[i,3]))))} else{
MCSE_med[[i]] <- MCSE_med[[i]] +
labs(title = bquote(atop(phantom(3),alpha[a] == .(scenarios[i,3]))))
}
}
if(i %in% c(1,10,19)){
MCSE_med[[i]] <- MCSE_med[[i]] +
ylab(bquote(atop(n == .(scenarios[i,1]), 'MC SE')))
} else{MCSE_med[[i]] <- MCSE_med[[i]] +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
}
if(i %in% 19:27){
MCSE_med[[i]] <- MCSE_med[[i]] +
xlab('Visit')
} else {MCSE_med[[i]] <- MCSE_med[[i]] +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank())
}
}
annotate_figure(ggarrange(plotlist = MCSE_med, nrow = 3, ncol = 9, common.legend = T,
legend = 'bottom',
widths = c(1.4,1,1,1,1,1,1,1,1),
heights = c(1.1, 0.95, 1)))
MCSE_high <-  lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = MC_SE_pivot[1,,i,3], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[1,,i,3], colour = "Bootstrap")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[2,,i,3], colour = "LEF outcome")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[2,,i,3], colour = "LEF outcome")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[3,,i,3], colour = "LEF both")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[3,,i,3], colour = "LEF both")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[4,,i,3], colour = "Sandwich")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[4,,i,3], colour = "Sandwich")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[5,,i,3], colour = "Jackknife MVN")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[5,,i,3], colour = "Jackknife MVN")) +
geom_line(aes(x = 0:4, y = MC_SE_pivot[6,,i,3], colour = "Jackknife Wald")) +
geom_point(aes(x = 0:4, y = MC_SE_pivot[6,,i,3], colour = "Jackknife Wald")) +
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple",
"Jackknife MVN" = 'orange',"Jackknife Wald" = 'deepskyblue' )) +
ylim(0,0.02) +
theme(legend.text = element_text(size=14))
}
)
for(i in 1:27){
if(i %in% 1:9){
if(i %in% c(2, 5, 8)){
MCSE_high[[i]] <- MCSE_high[[i]] +
labs(title = bquote(atop(alpha[c] == .(scenarios[i,2]), alpha[a] == .(scenarios[i,3]))))} else{
MCSE_high[[i]] <- MCSE_high[[i]] +
labs(title = bquote(atop(phantom(3),alpha[a] == .(scenarios[i,3]))))
}
}
if(i %in% c(1,10,19)){
MCSE_high[[i]] <- MCSE_high[[i]] +
ylab(bquote(atop(n == .(scenarios[i,1]), 'MC SE')))
} else{MCSE_high[[i]] <- MCSE_high[[i]] +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
}
if(i %in% 19:27){
MCSE_high[[i]] <- MCSE_high[[i]] +
xlab('Visit')
} else {MCSE_high[[i]] <- MCSE_high[[i]] +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank())
}
}
annotate_figure(ggarrange(plotlist = MCSE_high, nrow = 3, ncol = 9, common.legend = T,
legend = 'bottom',
widths = c(1.4,1,1,1,1,1,1,1,1),
heights = c(1.1, 0.95, 1)))
library(dplyr)
library(tidyverse)
library(tidyr)
setwd("/home/juliette/Multiple-trial-emulation-IPTW-MSM-CIs/Code")
library(ggplot2)
library(ggpubr)
#load("true_value_red_newsimus.rda")
#true_value_red <- -true_value_red
load("true_value_surv0.rda")
load("true_value_surv1.rda")
load("true_value_boot_200it_200k_fixed_700it.rda")
true_value_red <- true_value_boot_200it_200k_fixed
#load("Rdata.RData")
library(modelr)
library(MASS)
library(sandwich)
library(foreach)
library(doParallel)
library(parallel)
library(survival)
library(survminer)
library(lubridate)
library(pammtools)
library(doRNG)
library(matrixStats)
library(latex2exp)
library(grDevices)
library(xtable)
library(grDevices)
iters <- 1000
bootstrap_iter <- 500
sampling_size <- 500
bootstrap <- array(,dim = c(5,2,iters,27,3))
LEF_outcome <- array(,dim = c(5,2,iters,27,3))
LEF_both <- array(,dim = c(5,2,iters,27,3))
sandwich <- array(,dim = c(5,2,iters,27,3))
jackknife_mvn <- array(,dim = c(5,2,iters,27,3))
jackknife_wald <- array(,dim = c(5,2,iters,27,3))
time <- array(,dim = c(6,iters,27,3))
est <- array(,dim = c(5,iters,27,3))
treat_pos <- c(-1,-0.8,-0.5,-0.2,0,0.2,0.5,0.8,1)
outcomes <- c("low", 'med', 'high')
jackknife_se <- array(,dim = c(5,iters,27,3))
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- as.data.frame(tidyr::crossing(size,conf, treat))
bias_point <- array(,dim = c(5,27,3))
bias_surv0 <- array(,dim = c(5,27,3))
bias_surv1 <- array(,dim = c(5,27,3))
sd_point <- array(,dim = c(5,27,3))
mean_time <- data.frame(matrix(,nrow = 0, ncol = 10))
na_failure_rate <- data.frame(matrix(,nrow = 0, ncol = 7))
se_ratio <- data.frame(matrix(,nrow = 0, ncol = 5))
load("/home/juliette/UniHPC/J_sandwich_SE.rda")
load("/home/juliette/UniHPC/J_bootstrap_SE.rda")
load("/home/juliette/UniHPC/J_LEF_outcome_SE.rda")
load("/home/juliette/UniHPC/J_LEF_both_SE.rda")
load("/home/juliette/UniHPC/J_jackknife_mvn_SE.rda")
for (i in 1:27){
for (j in 1:3){
load(paste0("/home/juliette/UniHPC/J_CI_bootstrap_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("/home/juliette/UniHPC/J_CI_jackknife_mvn_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("/home/juliette/UniHPC/J_CI_jackknife_wald_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("/home/juliette/UniHPC/J_CI_LEF_outcome_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("/home/juliette/UniHPC/J_CI_LEF_both_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("/home/juliette/UniHPC/J_CI_sandwich_PP_red_",outcomes[j],'_', i, ".rda"))
load(paste0("/home/juliette/UniHPC/J_computation_time_",outcomes[j],'_', i, ".rda"))
load(paste0('/home/juliette/UniHPC/J_estimates_red_',outcomes[j],'_',i, '.rda'))
load(paste0('/home/juliette/UniHPC/J_survival_treatment_estimates_',outcomes[j],'_',i, '.rda'))
load(paste0('/home/juliette/UniHPC/J_survival_control_estimates_',outcomes[j],'_',i, '.rda'))
load(paste0('/home/juliette/UniHPC/J_jackknife_SEs_',outcomes[j],'_',i, '.rda'))
bootstrap[,,,i,j] <- CI_bootstrap_PP_red
LEF_outcome[,,,i,j] <- CI_LEF_outcome_PP_red
LEF_both[,,,i,j] <- CI_LEF_both_PP_red
sandwich[,,,i,j] <- CI_sandwich_PP_red
jackknife_mvn[,,,i,j] <- CI_jackknife_mvn_PP_red
jackknife_wald[,,,i,j] <- CI_jackknife_wald_PP_red
jackknife_se[,,i,j] <- jackknife_SEs
scenario <- i%%9
est[,,i,j] <- estimates
if (scenario ==0){scenario <- 9}
bias_point[,i,j] <- rowMeans(estimates, na.rm = TRUE) - true_value_red[,scenario,j]
bias_surv0[,i,j] <- rowMeans(survival_control_estimates, na.rm = TRUE) - surv0[,scenario,j]
bias_surv1[,i,j] <- rowMeans(survival_treatment_estimates, na.rm = TRUE) - surv1[,scenario,j]
sd_point[,i,j] <- rowSds(estimates, na.rm = TRUE)
for (k in 1:5){
se_ratio <- rbind(se_ratio, cbind(k-1,'Bootstrap',bootstrap_SE[k,,i,j]/sd_point[k,i,j],i,j))
se_ratio <- rbind(se_ratio, cbind(k-1,'LEF outcome',LEF_outcome_SE[k,,i,j]/sd_point[k,i,j],i,j))
se_ratio <- rbind(se_ratio, cbind(k-1,'LEF both',LEF_both_SE[k,,i,j]/sd_point[k,i,j],i,j))
se_ratio <- rbind(se_ratio, cbind(k-1,'Sandwich',sandwich_SE[k,,i,j]/sd_point[k,i,j],i,j))
se_ratio <- rbind(se_ratio, cbind(k-1,'Jackknife MVN',jackknife_mvn_SE[k,,i,j]/sd_point[k,i,j],
i,j))
se_ratio <- rbind(se_ratio, cbind(k-1,'Jackknife Wald',jackknife_se[k,,i,j]/sd_point[k,i,j],i,j))
}
mean_time <- rbind(mean_time, c(outcomes[j], scenarios[i,1], scenarios[i,2],scenarios[i,3], rowMeans(computation_time, na.rm = TRUE)))
}
}
colnames(mean_time) <- c('Outcome_prevalence', 'Sample_size', 'Confounding', 'Treatment_prevalence', 'Bootstrap', 'LEF_outcome',
'LEF_both', 'Jackknife_Wald','Jackknife_MVN' ,'Sandwich')
colnames(se_ratio) <- c('Visit', 'CI_type','SE_ratio','i', 'j')
se_ratio$i <- as.numeric(se_ratio$i)
se_ratio$SE_ratio <- as.numeric(se_ratio$SE_ratio)
se_ratio$Visit <- as.factor(se_ratio$Visit)
se_ratio$j <- as.numeric(se_ratio$j)
mean_time <- mean_time %>%
dplyr::mutate(Sample_size = as.numeric(Sample_size),
Confounding = as.numeric(Confounding),
Treatment_prevalence = as.numeric(Treatment_prevalence),
Bootstrap = as.numeric(Bootstrap),
LEF_outcome = as.numeric(LEF_outcome),
LEF_both = as.numeric(LEF_both),
Jackknife_Wald = as.numeric(Jackknife_Wald),
Jackknife_MVN = as.numeric(Jackknife_MVN),
Sandwich = as.numeric(Sandwich)) %>%
dplyr::group_by(Outcome_prevalence,Sample_size) %>%
dplyr::summarise(Bootstrap = mean(Bootstrap),
LEF_outcome = mean(LEF_outcome),
LEF_both = mean(LEF_both),
Jackknife_Wald =mean(Jackknife_Wald),
Jackknife_MVN = mean(Jackknife_MVN),
Sandwich = mean(Sandwich))
print(xtable(mean_time),
type = 'latex',include.rownames=FALSE)
##############
pivot_coverage_ind <- array(0,dim = c(6,5,27,3))
pivot_success <- array(0,dim = c(6,5,27,3))
for (i in 1:iters){
for (k in 1:5){
for (j in 1:27){
for (l in 1:3){
scenario <- j%%9
if (scenario ==0){scenario <- 9}
if (is.na(bootstrap[k,1,i,j,l]) == F){
pivot_success[1,k,j,l] <- pivot_success[1,k,j,l] + 1
if (all(2*est[k,i,j,l] - bootstrap[k,2,i,j,l] <=true_value_red[k,scenario, l])
& all(2*est[k,i,j,l] - bootstrap[k,1,i,j,l] >= true_value_red[k,scenario, l])){
pivot_coverage_ind[1,k,j,l] <- pivot_coverage_ind[1,k,j,l] + 1
}
}
if (is.na(LEF_outcome[k,1,i,j,l]) == F){
pivot_success[2,k,j,l] <- pivot_success[2,k,j,l] + 1
if (all(2*est[k,i,j,l] - LEF_outcome[k,2,i,j,l] <= true_value_red[k,scenario, l])
& all(2*est[k,i,j,l] - LEF_outcome[k,1,i,j,l] >=true_value_red[k,scenario, l])){
pivot_coverage_ind[2,k,j,l] <- pivot_coverage_ind[2,k,j,l] + 1
}
}
if (is.na(LEF_both[k,1,i,j,l]) == F){
pivot_success[3,k,j,l] <- pivot_success[3,k,j,l] + 1
if (all(2*est[k,i,j,l] - LEF_both[k,2,i,j,l] <= true_value_red[k,scenario, l])
& all(2*est[k,i,j,l] - LEF_both[k,1,i,j,l] >= true_value_red[k,scenario, l])){
pivot_coverage_ind[3,k,j,l] <- pivot_coverage_ind[3,k,j,l] + 1
}
}
if (all(is.na(sandwich[k,1,i,j,l])) == F){
pivot_success[4,k,j,l] <- pivot_success[4,k,j,l] + 1
if (all(sandwich[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(sandwich[k,2,i,j,l] >= true_value_red[k,scenario, l])){
pivot_coverage_ind[4,k,j,l]<- pivot_coverage_ind[4,k,j,l]+ 1
}
}
if (all(is.na(jackknife_mvn[k,1,i,j,l])) == F){
pivot_success[5,k,j,l] <- pivot_success[5,k,j,l] + 1
if (all(jackknife_mvn[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(jackknife_mvn[k,2,i,j,l] >= true_value_red[k,scenario, l])){
pivot_coverage_ind[5,k,j,l]<- pivot_coverage_ind[5,k,j,l]+ 1
}
}
if (all(is.na(jackknife_wald[k,1,i,j,l])) == F){
pivot_success[6,k,j,l] <- pivot_success[6,k,j,l] + 1
if (all(jackknife_wald[k,1,i,j,l] <= true_value_red[k,scenario, l])
& all(jackknife_wald[k,2,i,j,l] >= true_value_red[k,scenario, l])){
pivot_coverage_ind[6,k,j,l]<- pivot_coverage_ind[6,k,j,l]+ 1
}
}
}
}
}
}
pivot_coverage_ind <- pivot_coverage_ind/pivot_success
#          y = "Bias-eliminated coverage",
#          title = paste("N =", scenarios[i,1],
#                        '\nConfounding =',scenarios[i,2],
#                        '\nTreat. prev. =', scenarios[i,3]))+ ylim(0.3,1) +
#     theme(plot.title = element_text(size=10))+ theme(aspect.ratio = 1, axis.title = element_text(size = 10))
# }
# )
# annotate_figure(ggarrange(plotlist = coverage_high[1:9], nrow = 3, ncol = 9, common.legend = T,
#                           legend = 'bottom'), top = 'High event rate')
# ############### PIVOT COVERAGE #######################
coverage_low <-  lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[1,,i,1], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[1,,i,1], colour = "Bootstrap")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[2,,i,1], colour = "LEF outcome")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[2,,i,1], colour = "LEF outcome")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[3,,i,1], colour = "LEF both")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[3,,i,1], colour = "LEF both")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[4,,i,1], colour = "Sandwich")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[4,,i,1], colour = "Sandwich")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[5,,i,1], colour = "Jackknife MVN")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[5,,i,1], colour = "Jackknife MVN")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[6,,i,1], colour = "Jackknife Wald")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[6,,i,1], colour = "Jackknife Wald")) +
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple",
"Jackknife MVN" = 'orange',"Jackknife Wald" = 'deepskyblue' )) +
geom_hline(yintercept = 0.95, linetype = "dashed") +
ylim(0.4,1) +
theme(legend.text = element_text(size=14))
}
)
for(i in 1:27){
if(i %in% 1:9){
if(i %in% c(2, 5, 8)){
coverage_low[[i]] <- coverage_low[[i]] +
labs(title = bquote(atop(alpha[c] == .(scenarios[i,2]), alpha[a] == .(scenarios[i,3]))))} else{
coverage_low[[i]] <- coverage_low[[i]] +
labs(title = bquote(atop(phantom(3),alpha[a] == .(scenarios[i,3]))))
}
}
if(i %in% c(1,10,19)){
coverage_low[[i]] <- coverage_low[[i]] +
ylab(bquote(atop(n == .(scenarios[i,1]), 'Coverage')))
} else{coverage_low[[i]] <- coverage_low[[i]] +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
}
if(i %in% 19:27){
coverage_low[[i]] <- coverage_low[[i]] +
xlab('Visit')
} else {coverage_low[[i]] <- coverage_low[[i]] +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank())
}
}
annotate_figure(ggarrange(plotlist = coverage_low, nrow = 3, ncol = 9, common.legend = T,
legend = 'bottom',
widths = c(1.4,1,1,1,1,1,1,1,1),
heights = c(1.1, 0.95, 1)))
coverage_med <-  lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[1,,i,2], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[1,,i,2], colour = "Bootstrap")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[2,,i,2], colour = "LEF outcome")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[2,,i,2], colour = "LEF outcome")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[3,,i,2], colour = "LEF both")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[3,,i,2], colour = "LEF both")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[4,,i,2], colour = "Sandwich")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[4,,i,2], colour = "Sandwich")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[5,,i,2], colour = "Jackknife MVN")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[5,,i,2], colour = "Jackknife MVN")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[6,,i,2], colour = "Jackknife Wald")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[6,,i,2], colour = "Jackknife Wald")) +
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple",
"Jackknife MVN" = 'orange',"Jackknife Wald" = 'deepskyblue' )) +
geom_hline(yintercept = 0.95, linetype = "dashed") +
ylim(0.4,1) +
theme(legend.text = element_text(size=14))
}
)
for(i in 1:27){
if(i %in% 1:9){
if(i %in% c(2, 5, 8)){
coverage_med[[i]] <- coverage_med[[i]] +
labs(title = bquote(atop(alpha[c] == .(scenarios[i,2]), alpha[a] == .(scenarios[i,3]))))} else{
coverage_med[[i]] <- coverage_med[[i]] +
labs(title = bquote(atop(phantom(3),alpha[a] == .(scenarios[i,3]))))
}
}
if(i %in% c(1,10,19)){
coverage_med[[i]] <- coverage_med[[i]] +
ylab(bquote(atop(n == .(scenarios[i,1]), 'Coverage')))
} else{coverage_med[[i]] <- coverage_med[[i]] +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
}
if(i %in% 19:27){
coverage_med[[i]] <- coverage_med[[i]] +
xlab('Visit')
} else {coverage_med[[i]] <- coverage_med[[i]] +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank())
}
}
annotate_figure(ggarrange(plotlist = coverage_med, nrow = 3, ncol = 9, common.legend = T,
legend = 'bottom',
widths = c(1.4,1,1,1,1,1,1,1,1),
heights = c(1.1, 0.95, 1)))
coverage_high <-  lapply(1:27, function(i){
ggplot() +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[1,,i,3], colour = "Bootstrap")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[1,,i,3], colour = "Bootstrap")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[2,,i,3], colour = "LEF outcome")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[2,,i,3], colour = "LEF outcome")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[3,,i,3], colour = "LEF both")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[3,,i,3], colour = "LEF both")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[4,,i,3], colour = "Sandwich")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[4,,i,3], colour = "Sandwich")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[4,,i,3], colour = "Sandwich")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[5,,i,3], colour = "Jackknife MVN")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[5,,i,3], colour = "Jackknife MVN")) +
geom_line(aes(x = 0:4, y = pivot_coverage_ind[6,,i,3], colour = "Jackknife Wald")) +
geom_point(aes(x = 0:4, y = pivot_coverage_ind[6,,i,3], colour = "Jackknife Wald")) +
scale_color_manual(name = "CI type", values = c("Bootstrap"= "red", "Sandwich" = "blue",
"LEF outcome" = "green", "LEF both" = "purple",
"Jackknife MVN" = 'orange',"Jackknife Wald" = 'deepskyblue' )) +
geom_hline(yintercept = 0.95, linetype = "dashed") +
ylim(0.4,1) +
theme(legend.text = element_text(size=14))
}
)
for(i in 1:27){
if(i %in% 1:9){
if(i %in% c(2, 5, 8)){
coverage_high[[i]] <- coverage_high[[i]] +
labs(title = bquote(atop(alpha[c] == .(scenarios[i,2]), alpha[a] == .(scenarios[i,3]))))} else{
coverage_high[[i]] <- coverage_high[[i]] +
labs(title = bquote(atop(phantom(3),alpha[a] == .(scenarios[i,3]))))
}
}
if(i %in% c(1,10,19)){
coverage_high[[i]] <- coverage_high[[i]] +
ylab(bquote(atop(n == .(scenarios[i,1]), 'Coverage')))
} else{coverage_high[[i]] <- coverage_high[[i]] +
theme(axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title.y = element_blank())
}
if(i %in% 19:27){
coverage_high[[i]] <- coverage_high[[i]] +
xlab('Visit')
} else {coverage_high[[i]] <- coverage_high[[i]] +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.x = element_blank())
}
}
annotate_figure(ggarrange(plotlist = coverage_high, nrow = 3, ncol = 9, common.legend = T,
legend = 'bottom',
widths = c(1.4,1,1,1,1,1,1,1,1),
heights = c(1.1, 0.95, 1)))
source("~/Multiple-trial-emulation-IPTW-MSM-CIs/Code/weight_func.R", echo=TRUE)
library(modelr)
library(tidyverse)
library(tidyr)
source("simulate_MSM_simplified.R")
source("weight_func.R")
set.seed(NULL)
library(TrialEmulation)
library(MASS)
library(sandwich)
library(doParallel)
library(doRNG)
library(rlist)
iters <- 1000
bootstrap_iter <- 500
sampling_size <- 500
size <- c(200,1000,5000)
treat <- c(-1,0,1)
conf <- c(0.1,0.5,0.9)
scenarios <- tidyr::crossing(size,conf, treat)
l = 1
i = 1
simdata_censored<-DATA_GEN_censored_reduced(as.numeric(scenarios[l,1]), 5,
conf = as.numeric(scenarios[l,2]),
treat_prev = as.numeric(scenarios[l,3]),
outcome_prev = -4.7,
censor = F)
PP_prep <- TrialEmulation::data_preparation(simdata_censored, id='ID', period='t', treatment='A', outcome='Y',
eligible ='eligible',
switch_d_cov = ~X2 + X4,
outcome_cov = ~X2 + X4, model_var = c('assigned_treatment'),
use_weight=T, use_censor=T, quiet = T,
save_weight_models = T,
data_dir = data_direction)
View(switch_data)
# Move the call to bootstrap_construct outside the for loop to avoid problems with random numbers
boot_data <- list()
for (k in 1:bootstrap_iter) {
boot_data[[k]] <- sort(sample(unique(switch_data$id), length(unique(switch_data$id)), replace = TRUE))
}
k = 1
weights_table_boot <- data.frame(id = 1:as.numeric(scenarios[l,1])) %>%
rowwise() %>%
dplyr::mutate(weight_boot = length(boot_data[[k]][boot_data[[k]] == id])) #bootstrap weight is number of times they were sampled
### Refitting weights on bootstrap sample without having to redo the data expansion
IP_model <- weight_func_bootstrap(data = simdata_censored, expanded_data = switch_data,
switch_d_cov = ~ X2 + X4,
weight_model_d0 = switch_d0,
weight_model_n0 = switch_n0,
weight_model_d1 = switch_d1,
weight_model_n1 = switch_n1,
boot_idx = boot_data[[k]], remodel = TRUE, quiet = TRUE)
new_data <- switch_data %>%  select(id, trial_period, followup_time, weight)
expanded_data <- switch_data
output_data <- new_data[expanded_data, on = list( id = id, trial_period = trial_period,
followup_time = followup_time)] %>%
dplyr::select(names(expanded_data))
View(output_data)
output_data <- new_data[expanded_data, on = list( id = id, trial_period = trial_period,
followup_time = followup_time)]
View(output_data)
new_data[, weight := 1]
output_data <- new_data[expanded_data, on = list( id = id, trial_period = trial_period,
followup_time = followup_time)]
View(output_data)
